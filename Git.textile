h1. Git

h2. Config

useful alias for command line lovers

bc. [alias]
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --no-merges
    logme = log --no-merges --author=AUTHOR_NAME
    st = status
    ci = commit
    co = checkout
    br = branch
    a = add
    cp = cherry-pick
    mg = merge
    amend = commit --amend
    unstg = reset HEAD --
    # Do not delete file from the working tree
    rm = rm --cached
    # Delete file from the index and working tree
    del = rm
    rs = reset
    rb = rebase

h3. Proxy Configuration

bc. [http]
    proxy = http://user:password@proxy-server:proxy-port
    # Useful if your proxy only allow know user agent
    useragent = Mozilla/4.0


h2. Export Git repository (Make visible to everybody for read only access)

h3. Go to repo dir

bc. cd my-repo

h3. Create git-daemon-export-ok

bc. touch git-daemon-export-ok

h3. Execute

bc. /usr/bin/git daemon --verbose --base-path=PARENT-DIR-OF-MY-REPO --reuseaddr --detach

h3. Put as cron task for future access

bc. @reboot /usr/bin/git daemon --base-path=PARENT-DIR-OF-MY-REPO --reuseaddr --detach

h2. History

h3. Show

Full history

bc. git log

Show history for the last 2 commits

bc. git log -n 2

h3. Rewrite history

Note: Rewrite history only for commits that are in your local branch

h4. Merge commits

Do an interactive rebase

bc. git rebase -i HEAD~NUM-OF-CI-FROM-HEAD

Put the target commit after the commit you want to merge with

Put squash or fixup before the target commit

h4. Exclude a file from the last commit

bc. git reset --soft HEAD~1
git reset HEAD fich


h2. Ignorando ficheros temporalmente

bc. git update-index --assume-unchanged <file>
git update-index --no-assume-unchanged <file>

h2. Añadir al índice solo partes de un fichero

bc. git add -p fich

h2. Ramas

h3. Fetching

bc. $ git fetch [remote_name]
$ git fetch origin

h3. Getting

Create a new branch: severfix from origin/serverfirx (Pulling from remote)

bc. $ git checkout -b [local_branch_name] [remote_name]/[remote_branch_name]
git checkout -b serverfix origin/serverfirx

Create a new branch: severfix from master (Pulling from local, if from is no spcify default branch = current branch)

bc. $ git checkout -b serverfix master

h3. Pushing

bc. $ git push [remote_name] [branch]
git push origin serverfix

h3. Pulling

bc. git pull [remote_name] [branch]
$ git pull origin serverfix

h3. Deleting

Remote deleting

bc. $  git push [remote_name] :[remote_branch_name]
git push origin :serverfix

Local deleting

bc. $ git branch -[Dd] localbranch
